---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
---
<Layout>
    <Header/>
    <div class="container">
        <div class="user-info">
            <p class="username"></p>
            <img src="/public/usercartimg.png" alt="img cart">
            <p class="items-quantity"></p>
            <p class="total"></p>
        </div>
        <div class="cart-items">
            <h2>Car empty</h2>
        </div>
    </div>
</Layout>

<script>
    import { gsap } from "gsap";
    gsap.fromTo(".header-container",{x: -500},{opacity:1, x:0,duration: 2})
    interface Product{
        id: number,
        title: string,
        price: number,
        image: string,
        quantity: number
    }

    const getCookie = async()=>{
		const res = await fetch(`http://localhost:3000/auth`,{
			method: "GET",
			credentials: "include"
		})

		const data = await res.json()
        const username = document.querySelector(".username")
        if(username){
            username.textContent = `${data.username}`
        }
	}

    getCookie()

    const getUserCart = async()=>{
        const res = await fetch("http://localhost:3000/cart",{
            method: "GET",
            credentials: "include"
        })
        if(!res.ok){
            // window.location.href = "/"
            console.log(res)
            return
        }
        const container = document.querySelector(".cart-items") as HTMLDivElement
        container.innerHTML = ""
        const data = await res.json() as Product[]
        let total: number = 0
        let quantity: number = 0
        data.forEach(element =>{
            total += element.price * element.quantity
            quantity += element.quantity
            const cartItem = document.createElement("div")
            cartItem.classList.add("item")
            if(cartItem){
                cartItem.innerHTML = `
                <h2>${element.title}</h2>
                <div class="article-container">
                    <div class="image-container">
                        <img src="${element.image}">
                    </div>
                    <div class="info-container">
                        <p>Price: $${element.price} Cad</p>
                        <p>Quantity: ${element.quantity}</p>
                        <div class="actions">
                            <div onclick="deduct(${element.id})">
                                <img src="/public/deduct.png" alt="deduct item"></div>
                            <div onclick="add(${element.id},'${element.title}','${element.image}', ${element.price})">
                                <img src="/public/add.png" alt="add item"></div>
                        </div>
                    </div>
                </div>
            ` 
                container.appendChild(cartItem)
            }
        })
        // total from teh cart
        const totalItems = document.querySelector(".total") as HTMLParagraphElement
        if(totalItems){
            totalItems.innerHTML = `Total $${total} Cad`
        }
        // qunatrity
        const quantityItems = document.querySelector(".items-quantity") as HTMLParagraphElement
        if(quantityItems){
            quantityItems.textContent = `${quantity} Items`
        }
        gsap.fromTo(".user-info",{x: -500},{opacity:1, x:0,duration: 2})
        gsap.fromTo(".item",{y: 500},{opacity:1, y:0, stagger: 0.5,duration: 2})
    }

    const header = document.querySelector(".header-container") as HTMLHeadElement
    header.innerHTML = `
					<div><img id="home" src="/public/Home.png" alt="Home"><img id="logout" src="/public/Logout.png" alt="Logout"></div>
					<div  class="logo"><p>Virtual Ventures</p><img class="img-logo" src="/public/icon.png" alt="Logo"></div>
					<div><img id="profile" src="/public/profile.png" alt="Shopping Cart"></div>
				`
			const logoutBtn =  document.querySelector("#logout") as HTMLDivElement
			logoutBtn.addEventListener("click",async()=>{
				await fetch(`http://localhost:3000/logout`,{
					method: "GET",
					credentials: "include"
				})

				window.location.href = "/"
			})

			const homeBtn = document.querySelector("#home") as HTMLDivElement
			homeBtn.addEventListener("click",async()=>{
				window.location.href = "/"
			})

			const profileBtn = document.querySelector("#profile") as HTMLDivElement
			profileBtn.addEventListener("click", async()=>{
				const res = await fetch("http://localhost:3000/profile",{
					method: "GET",
					credentials: "include"
				})

				if(!res.ok){
					window.location.href = "/"
				}

				window.location.href = "/profile"
            })
    getUserCart()
</script>

<script is:inline>
    const deduct = async(id)=>{
        // deduct item
        const res = await fetch("http://localhost:3000/id",{
            method: "POST",
            credentials: "include",
            headers:{
                    "Content-Type": "application/json"
                },
                    // send the data
                    body: JSON.stringify({id: id})
        })
        if(res.ok){
            toast("Item deducted")
            setTimeout(() => {
                window.location.href = "/cart"
            }, 2000);
        }        
    }

    const add = async(idItem, titleItrem, imageItem, priceItem)=>{ 
        console.log(idItem)
        const res = await fetch("http://localhost:3000/product",{
            method: "POST",
            credentials: "include",
            headers:{"Content-Type": "application/json"},
            // send the data
            body: JSON.stringify({id:idItem, title:titleItrem, image:imageItem, price: priceItem})
		})
        if(res.ok){
            toast("Item added")
            setTimeout(() => {
                window.location.href= "/cart"
            }, 2000);
        }
    }

    const toast = (text)=>{
        Toastify({
            text: `${text}`,
            duration: 3000,
            style: {
            background: "linear-gradient(to right, #00b09b, #96c93d)",
        }
        }).showToast();
    }
</script>

<style is:inline>
    .container{
        display: flex;
        flex-direction: column-reverse;
        gap: 10em;
        position: relative;
    }
    .user-info{
        top: 1em;
        position: sticky;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1em;
        text-align: center;
        margin: 2em;
        height: 30em;
    }
    .username{
        font-size: 2em;
        text-align: center;
    }
    .user-info > img{
        width: 15em;
    }
    .items-quantity, .total{
        font-size: 1.4em;
    }
    .item{
        color: black;
        width: 22em;
        height: 30em;
        background-color: #C8D6E0;
        margin: 0 auto;
        border-radius: 10px;
    }
    
    .item > h2{
        margin: 1em;
        display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: 2;
		overflow: hidden;
    }

    .article-container{
        display: flex;
        flex-direction: column;
        justify-items: center;
        align-items: center;
        margin: 1em;
    }
    
    .image-container{
        width: 15em;
    }
    .image-container > img{
        max-width: 100%;
        width: auto;
    }
    .info-container > p{
        font-size: 1.4em;
    }
    .info-container{
        display: flex;
        flex-direction: column;
        gap: 2em;
        justify-content: center;
    }
    .actions{
        display: flex;
        flex-direction: row;
        gap: 2em;
    }
    .actions > div:hover{
        cursor: pointer;
    }
    @media (min-width: 1200px) {
        .container{
            display: flex;
            flex-direction: row;
            gap: 10em;
            position: relative;
        }
        .user-info{
            top: 1em;
            position: sticky;
            display: flex;
            flex-direction: column;
            gap: 1em;
            text-align: center;
            margin: 2em;
            height: 30em;
        }
        .username{
            font-size: 2em;
            text-align: center;
        }
        .user-info > img{
            width: 15em;
        }
        .items-quantity, .total{
            font-size: 1.4em;
        }
        .item{
            color: black;
            width: 40em;
            height: 22em;
            background-color: #C8D6E0;
            margin: 0 auto;
            border-radius: 10px;
        }
        
        .item > h2{
            margin: 1em;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            overflow: hidden;
        }

        .article-container{
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            margin: 1em;
        }
        
        .image-container{
            width: 15em;
        }
        .image-container > img{
            max-width: 100%;
            width: auto;
        }
        .info-container > p{
            font-size: 1.4em;
        }
        .info-container{
            display: flex;
            flex-direction: column;
            gap: 2em;
            justify-content: center;
        }
        .actions{
            display: flex;
            flex-direction: row;
            gap: 2em;
        }
        .actions > div:hover{
            cursor: pointer;
        }
    }
</style>